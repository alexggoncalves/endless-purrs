using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using System.Linq;
using Unity.VisualScripting;
using UnityEngine.UIElements;

public class WaveFunctionCollapse2 : MonoBehaviour
{
    // List of all the possible tiles
    Tile[] tiles;
    Tile emptyTile;

    // Dimensions
    Vector3 cellScale;
    int width, depth, height;

    // Cell prefab
    private Cell cellObj;

    public List<Cell> grid;
    private int iteration = 0;

    GameObject cellContainer;
    GameObject tileInstanceContainer;

    private Stack<Cell> updatedCells;

    public void Initialize(List<Tile> possibleTiles, int width, int depth, int height, Vector3 cellScale, Cell cellObj)
    {
        /*int emptyIndex = possibleTiles.FindIndex((tile) => tile.name == "empty");*/
        emptyTile = possibleTiles[0];

        tiles = possibleTiles.ToArray();

        this.cellScale = cellScale;
        this.width = width;
        this.depth = depth;
        this.height = height;
        this.cellObj = cellObj;

        cellContainer = new GameObject("Grid Container");
        tileInstanceContainer = new GameObject("Tile Instance Container");

        updatedCells = new Stack<Cell>();

        InitializeGrid();
    }

    public void InitializeGrid()
    {
        grid = new List<Cell>();
        // Add the Cell component for every cell of the grid


        for (int y = 0; y < height; y++)
        {
            for (int z = 0; z < depth; z++)
            {
                for (int x = 0; x < width; x++)
                {
                    Vector3 position = new Vector3(-(cellScale.x * width) / 2 + x * cellScale.x, -(cellScale.y * height) / 2 + y * cellScale.y, -(cellScale.z * depth) / 2 + z * cellScale.z);
                    Cell newCell = Instantiate(cellObj, position, Quaternion.identity);
                    newCell.transform.SetParent(cellContainer.transform);

                    // Every cell is given all the possible tiles and it's collapsed state is set to false 
                    newCell.CreateCell(false, tiles, x, y, z);
                    grid.Add(newCell);
                }
            }
        }

        StartCoroutine(CheckEntropy());
    }


    // Find the cell(s) with the least tile possibilies and collapse it into one of the superpositions(tiles)
    IEnumerator CheckEntropy()
    {
        List<Cell> tempGrid = new List<Cell>(grid);
        tempGrid.RemoveAll((c) => c.collapsed);
        tempGrid.Sort((a, b) => a.tileOptions.Length - b.tileOptions.Length);
        tempGrid.RemoveAll(a => a.tileOptions.Length != tempGrid[0].tileOptions.Length);

        yield return new WaitForSeconds(0);

        CollapseCell(tempGrid);
    }


    //  Collapses one of the cells with the least number of tile possibilities(superpositions)
    void CollapseCell(List<Cell> tempGrid)
    {
        UnityEngine.Random.InitState(System.DateTime.Now.Millisecond);
        int randomIndex = UnityEngine.Random.Range(0, tempGrid.Count);

        Cell cellToCollapse = tempGrid[randomIndex];

        cellToCollapse.collapsed = true;


        Tile selectedTile = SelectRandomTile(cellToCollapse);

        if (selectedTile != null)
        {
            cellToCollapse.tileOptions = new Tile[] { selectedTile };
            updatedCells.Push(cellToCollapse);
        }
        else
        {
            cellToCollapse.empty = true;
            cellToCollapse.tileOptions = new Tile[] { emptyTile };

        }

        Tile foundTile = cellToCollapse.tileOptions[0];

        GameObject tileInstance = foundTile.Instantiate(cellToCollapse.transform.position);
        tileInstance.transform.SetParent(tileInstanceContainer.transform);

        /*if (selectedTile == null) { ResetGrid(); } else*/
        UpdateGeneration();
    }

    // Selects a random Tile from the possible options based on their weights
    Tile SelectRandomTile(Cell cellToColapse)
    {
        List<Tile> options = cellToColapse.tileOptions.ToList<Tile>();
        options.RemoveAll((t) => t.name == "empty");

        options.OrderBy(tile => tile.weight);

        float totalWeight = 0f;
        foreach (Tile t in options) totalWeight += t.weight;

        float diceRoll = UnityEngine.Random.Range(0, totalWeight);

        float cumulative = 0f;
        for (int i = 0; i < options.Count; i++)
        {
            cumulative += options[i].weight;
            if (diceRoll < cumulative)
            {
                return options[i]; ;
            }
        }
        return null;
    }

    //  Looks at the 6 surrounding cells and updates the list of possible tiles.
    void UpdateCellsEntropy(Cell cell)
    {
        int x = cell.GetX();
        int y = cell.GetY();
        int z = cell.GetZ();

        // Start with considering all possibilities and then remove the tiles that are not valid by checking the 4 surrounding neighbours
        List<Tile> options = new List<Tile>(tiles);


        if (x < width - 1) // RIGHT
        {
            Cell right = grid[(x + 1) + (width * z) + (width * height * y)];

            List<Tile> validOptions = new List<Tile>();

            foreach (Tile possibleTile in right.tileOptions)
            {
                validOptions = validOptions.Concat(possibleTile.leftNeighbours).ToList();
            }

            CheckValidity(options, validOptions);
        }

        if (x > 0) // LEFT 
        {
            Cell left = grid[(x - 1) + (width * z) + (width * height * y)];

            List<Tile> validOptions = new List<Tile>();

            foreach (Tile possibleTile in left.tileOptions)
            {
                validOptions = validOptions.Concat(possibleTile.rightNeighbours).ToList();
            }

            CheckValidity(options, validOptions);
        }

        if (z < depth - 1) // FRONT
        {
            Cell front = grid[x + (width * (z + 1)) + (width * height * y)];

            List<Tile> validOptions = new List<Tile>();

            // Loop through the up cell tileOptions and get all their compatible down neighbours
            foreach (Tile possibleTile in front.tileOptions)
            {
                validOptions = validOptions.Concat(possibleTile.backNeighbours).ToList();
            }

            CheckValidity(options, validOptions);
        }

        if (z > 0) // BACK
        {
            Cell back = grid[x + (width * (z - 1)) + (width * height * y)];

            List<Tile> validOptions = new List<Tile>();

            foreach (Tile possibleTile in back.tileOptions)
            {
                validOptions = validOptions.Concat(possibleTile.frontNeighbours).ToList();
            }

            CheckValidity(options, validOptions);
        }

        if (y < height - 1) // UP
        {
            Cell up = grid[x + (width * z) + (width * height * (y + 1))];
            List<Tile> validOptions = new List<Tile>();

            // Loop through the up cell tileOptions and get all their compatible down neighbours
            foreach (Tile possibleTile in up.tileOptions)
            {
                validOptions = validOptions.Concat(possibleTile.downNeighbours).ToList();
            }

            CheckValidity(options, validOptions);

        }
        if (y > 0) // DOWN
        {

            Cell down = grid[x + (width * z) + (width * height * (y - 1))];

            List<Tile> validOptions = new List<Tile>();

            foreach (Tile possibleTile in down.tileOptions)
            {
                validOptions = validOptions.Concat(possibleTile.upNeighbours).ToList();
            }

            CheckValidity(options, validOptions);

        }

        if (cell.tileOptions.Length != options.Count && cell.tileOptions.Length > 0)
        {
            updatedCells.Push(cell);
        }

        // Update cell's tile options
        cell.RecreateCell(options.ToArray());
    }

    // Go through the options array for the cell being updated and remove any tile that isn't present in the valid options array
    // The valid options array will bring the tiles that each of the directions allow the focused tile to be.
    void CheckValidity(List<Tile> options, List<Tile> validOption)
    {
        for (int i = options.Count - 1; i >= 0; i--)
        {
            var element = options[i];
            if (!validOption.Contains(element))
            {
                options.RemoveAt(i);
            }
        }
    }

    void UpdateGeneration()
    {
        while (updatedCells.Count > 0)
        {
            Cell cell = updatedCells.Pop();
            int x = cell.GetX();
            int y = cell.GetY();
            int z = cell.GetZ();



            if (x < width - 1)
            {
                Cell right = grid[(x + 1) + (width * z) + (width * height * y)];
                UpdateCellsEntropy(right);
            }
            if (x > 0)
            {
                Cell left = grid[(x - 1) + (width * z) + (width * height * y)];
                UpdateCellsEntropy(left);
            }

            if (z < depth - 1)
            {
                Cell front = grid[x + (width * (z + 1)) + (width * height * y)];
                UpdateCellsEntropy(front);
            }
            if (z > 0)
            {
                Cell back = grid[x + (width * (z - 1)) + (width * height * y)];
                UpdateCellsEntropy(back);
            }

            if (y < height - 1)
            {
                Cell up = grid[x + (width * z) + (width * height * (y + 1))];

                UpdateCellsEntropy(up);
            }
            if (y > 0)
            {
                Cell down = grid[x + (width * z) + (width * height * (y - 1))];
                if (!down.empty)
                    UpdateCellsEntropy(down);

            }

        }

        // After collapsing one cell and updating the tiles that need to be updated:
        // start another iteration of the algorithm if there are still cells remaining to be collapsed
        iteration++;
        if (iteration < width * height * depth)
        {
            StartCoroutine(CheckEntropy());
        }
    }




    // Destroy all placed tile instances, reset all cell states and restart algorithm
    private void ResetGrid()
    {
        foreach (Transform child in tileInstanceContainer.transform)
        {
            GameObject.Destroy(child.gameObject);
        }
        foreach (Cell cell in grid)
        {
            cell.collapsed = false;
            cell.tileOptions = tiles;
        }

        iteration = 0;

        StartCoroutine(CheckEntropy());
    }

    void CleanSection(int x, int y, int w, int h)
    {

        for (int i = 0; i < width; i++)
        {
            for (int j = 0; j < height; j++)
            {

                /*grid[i, j].ResetCell(tiles);*/
            }
        }
    }

    private void OnDestroy()
    {
        Destroy(gameObject);
    }
}